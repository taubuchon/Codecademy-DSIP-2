-- Basic Requirements
-- Which tracks appeared in the most playlists? how many playlist did they appear in?
SELECT tracks.Name, COUNT(playlist_track.PlaylistId) AS "Playlists" FROM playlist_track
LEFT JOIN tracks ON tracks.TrackId = playlist_track.TrackId
GROUP BY playlist_track.TrackId
ORDER BY COUNT(playlist_track.TrackId) DESC;

-- Which track generated the most revenue? which album? which genre?
SELECT invoice_items.TrackID, tracks.Name, SUM(Invoice_Items.UnitPrice) AS "Total Revenue" FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
GROUP BY invoice_items.TrackId
ORDER BY SUM(invoice_items.UnitPrice) DESC;

SELECT albums.Title, ROUND(SUM(invoice_items.UnitPrice), 2) AS "Total Revenue" FROM albums
JOIN tracks ON albums.AlbumId = tracks.AlbumId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
GROUP BY albums.AlbumId
ORDER BY ROUND(SUM(invoice_items.UnitPrice), 2) DESC;

SELECT genres.Name, ROUND(SUM(invoice_items.UnitPrice), 2) AS "Total Revenue" FROM genres
JOIN tracks ON genres.GenreId = tracks.GenreId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
GROUP BY genres.GenreId
ORDER BY ROUND(SUM(invoice_items.UnitPrice), 2) DESC;

-- Which countries have the highest sales revenue? What percent of total revenue does each country make up?
SELECT customers.Country, ROUND(SUM(invoice_items.UnitPrice), 2) AS "Total Revenue" FROM customers
JOIN invoices ON customers.CustomerId = invoices.CustomerId
JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY customers.Country
ORDER BY ROUND(SUM(invoice_items.UnitPrice), 2) DESC;
-- OR
SELECT invoices.BillingCountry, ROUND(SUM(invoice_items.UnitPrice), 2) AS "Total Revenue" FROM invoices
JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY invoices.BillingCountry
ORDER BY ROUND(SUM(invoice_items.UnitPrice), 2) DESC;
-- with %
SELECT invoices.BillingCountry, ROUND(SUM(invoice_items.UnitPrice), 2) AS "Total Revenue", ROUND((SUM(invoice_items.UnitPrice)/(SELECT SUM(invoice_items.UnitPrice) FROM invoice_items) * 100), 2) AS "% Revenue" FROM invoices
JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY invoices.BillingCountry
ORDER BY SUM(invoice_items.UnitPrice) DESC;

-- How many customers did each employee support, what is the average revenue for each sale, and what is their total sale?

SELECT employees.EmployeeId, employees.FirstName, employees.LastName, COUNT(customers.CustomerId) AS "Customers Assisted" FROM employees
LEFT JOIN customers ON employees.EmployeeId = customers.SupportRepId
GROUP BY employees.EmployeeId
ORDER BY COUNT(customers.CustomerId) DESC;

SELECT employees.EmployeeId, employees.FirstName, employees.LastName, ROUND(AVG(invoices.Total), 2) AS "Avg Sale" FROM employees
LEFT JOIN customers ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY employees.EmployeeId
ORDER BY AVG(invoices.Total) DESC;

SELECT employees.EmployeeId, employees.FirstName, employees.LastName, ROUND(SUM(invoices.Total), 2) AS "Total Sales" FROM employees
LEFT JOIN customers ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY employees.EmployeeId
ORDER BY SUM(invoices.Total) DESC;

--Intermediate Challenge
--Do longer or shorter length albums tend to generate more revenue?
SELECT albums.AlbumId, Title, SUM(Milliseconds)/6000 AS "album_length_minutes",
CASE
WHEN SUM(Milliseconds)/6000 >= 60 THEN "Long"
WHEN SUM(Milliseconds)/6000 >= 30 THEN "Medium"
ELSE "Short"
END album_length_description
FROM albums
JOIN tracks ON albums.AlbumId = tracks.TrackId
GROUP BY albums.AlbumId
ORDER BY album_length_minutes DESC;

WITH album_length AS
(SELECT albums.AlbumId, Title, SUM(Milliseconds)/6000 AS "album_length_minutes",
CASE
WHEN SUM(Milliseconds)/6000 >= 60 THEN "Long"
WHEN SUM(Milliseconds)/6000 >= 30 THEN "Medium"
ELSE "Short"
END album_length_description
FROM albums
JOIN tracks ON albums.AlbumId = tracks.TrackId
GROUP BY albums.AlbumId
ORDER BY album_length_minutes DESC)
SELECT album_length_description, ROUND(SUM(invoices.Total), 2) AS "Total Revenue" FROM album_length
JOIN tracks ON tracks.AlbumId = album_length.AlbumId
JOIN invoice_items ON invoice_items.TrackId = tracks.TrackId
JOIN invoices ON invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY album_length_description
ORDER BY "Total Revenue" DESC;

--Is the number of times a track appears in any playlist a good indicator of sales?
SELECT tracks.Name, COUNT(playlist_track.TrackId) AS "playlist_count" FROM tracks
LEFT JOIN playlist_track ON playlist_track.TrackId = tracks.TrackId
GROUP BY playlist_track.TrackId
ORDER BY playlist_track.TrackId DESC;

WITH track_appearances AS 
(SELECT tracks.Name, tracks.TrackId, COUNT(playlist_track.TrackId) AS "playlist_count" FROM tracks
LEFT JOIN playlist_track ON playlist_track.TrackId = tracks.TrackId
GROUP BY playlist_track.TrackId
ORDER BY playlist_track.TrackId DESC)
SELECT playlist_count, ROUND(AVG(invoices.Total), 2) AS "avg_revenue" FROM track_appearances
JOIN invoice_items ON track_appearances.TrackId = invoice_items.TrackId
JOIN invoices ON invoices.InvoiceId = invoice_items.InvoiceID
GROUP BY 1
ORDER BY 2 DESC;

--Advanced Challenge
--How much revenue is generated each year, and what is its percent change 53 from the previous year?
SELECT CAST(STRFTIME('%Y',InvoiceDate) as INT) AS 'year', ROUND(SUM(Total), 2) AS 'years_revenue', CAST(STRFTIME('%Y',InvoiceDate) as INT) - 1 AS 'previous_year'
  FROM invoices
  GROUP BY 1
  ORDER BY 1 DESC; 
  
WITH revenue as
(SELECT CAST(STRFTIME('%Y',InvoiceDate) as INT) AS 'Year', CAST(STRFTIME('%Y',InvoiceDate) as INT) - 1 AS 'Previous_Year', ROUND(SUM(Total), 2) AS 'Revenue_for_Year'
  FROM invoices
  GROUP BY 1
  ORDER BY 1 DESC)
SELECT current.Year, current.Previous_Year, current.Revenue_for_Year, 
ROUND((current.Revenue_for_Year - previous.Revenue_for_Year)/previous.Revenue_for_Year * 100, 2) AS 'Pct_change_compared_to_last_year'
FROM revenue current LEFT JOIN revenue previous
ON current.Previous_Year = previous.Year
